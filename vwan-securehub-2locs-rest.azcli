############################################################################
# Created by Jose Moreno
# February 2020
#
# Creates a VWAN secure hub
############################################################################

# Variables
rg=vwan
vwan=vwan
location1=westeurope
location2=westus
username=jose
password=Microsoft123!
publisher=cisco
offer=cisco-csr-1000v
sku=16_12-byol
version=$(az vm image list -p $publisher -f $offer -s $sku --all --query '[0].version' -o tsv)
vwan_hub1_prefix=192.168.1.0/24
azfw1_ip=192.168.1.68
rs1_ip=192.168.1.132
user_hub1_prefix=10.1.0.0/24
user_hub1_subnet=10.1.0.0/26
user_hub1_nva_ip=10.1.0.10
spoke1_prefix=10.1.1.0/24
spoke1_subnet=10.1.1.0/26
spoke1_jump_subnet=10.1.1.64/26
spoke1_vm_ip=10.1.1.11
spoke1_jump_ip=10.1.1.75
spoke2_prefix=10.1.2.0/24
spoke2_subnet=10.1.2.0/26
spoke2_vm_ip=10.1.2.11
spoke2_jump_subnet=10.1.2.64/26
spoke2_jump_ip=10.1.2.75
branch1_prefix=10.1.201.0/24
branch1_subnet=10.1.201.0/26
branch1_bgp_ip=10.1.201.10
vwan_hub2_prefix=192.168.2.0/24
azfw2_ip=192.168.2.68
rs2_ip=192.168.2.132
branch2_prefix=10.2.202.0/24
branch2_subnet=10.2.202.0/26
branch2_bgp_ip=10.2.202.10
branch3_prefix=10.2.203.0/24
branch3_subnet=10.2.203.0/26
branch3_bgp_ip=10.2.203.10
user_hub2_prefix=10.2.0.0/24
user_hub2_subnet=10.2.0.0/26
user_hub2_nva_ip=10.2.0.10
spoke3_prefix=10.2.3.0/24
spoke3_subnet=10.2.3.0/26
spoke3_vm_ip=10.2.3.11
spoke3_jump_subnet=10.2.3.64/26
spoke3_jump_ip=10.2.3.75
spoke4_prefix=10.2.4.0/24
spoke4_subnet=10.2.4.0/26
spoke4_vm_ip=10.2.4.11
spoke4_jump_subnet=10.2.4.64/26
spoke4_jump_ip=10.2.4.75
vwan_hub1_asn=65515
vwan_hub2_asn=65515
branch1_asn=65501
branch2_asn=65502
branch3_asn=65503
nva_size=Standard_B2ms
vm_size=Standard_B1ms
logws_name=log$RANDOM


####################
#   JSON scripts   #
####################

# REST Variables
vwan_api_version=2020-05-01
subscription_id=$(az account show --query id -o tsv)
# JSON
vwan_json='{location: $location, properties: {disableVpnEncryption: false, type: $sku}}'
vhub_json='{location: $location, properties: {virtualWan: {id: $vwan_id}, addressPrefix: $hub_prefix, sku: $sku}}'
vpnsitelink_json='{name: $link_name, properties: {ipAddress: $remote_pip, bgpProperties: {bgpPeeringAddress: $remote_bgp_ip, asn: $remote_asn}, linkProperties: {linkProviderName: "vendor1", linkSpeedInMbps: 100}}}'
vpnsite_json='{location: $location, properties: {virtualWan: {id: $vwan_id}, addressSpace: { addressPrefixes: [ $site_prefix ] }, isSecuritySite: $security, vpnSiteLinks: [ '${vpnsitelink_json}']}}'
cx_json='{name: $cx_name, properties: {connectionBandwidth: 200, vpnConnectionProtocolType: "IKEv2", enableBgp: true, sharedKey: $psk, vpnSiteLink: {id: $site_link_id}}}'
vpncx_json='{properties: {enableInternetSecurity: true, remoteVpnSite: {id: $site_id}, vpnLinkConnections: ['$cx_json']}}'
vpngw_json='{location: $location, properties: {virtualHub: {id: $vhub_id}, connections: [], bgpSettings: {asn: $asn, peerWeight: 0}}}'
vnet_cx_json='{properties: {remoteVirtualNetwork: {id: $vnet_id}, enableInternetSecurity: true}}'
rt_json='{properties: {routes: [], labels: []}}'
route_json='{name: $name, destinationType: "CIDR", destinations: [ $prefixes ], nextHopType: $type, nextHop: $nexthop }'
cxroute_json='{name: $name, addressPrefixes: [ $prefixes ], nextHopIpAddress: $nexthop }'


###################
# RG, VWAN, vHubs #
###################

# RG
az group create -n $rg -l $location1

# vwan
# https://docs.microsoft.com/en-us/rest/api/virtualwan/virtualwans/createorupdate
# az network vwan create -n $vwan -g $rg -l $location1 --branch-to-branch-traffic true --vnet-to-vnet-traffic true
vwan_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualWans/$vwan?api-version=$vwan_api_version"
vwan_json_string=$(jq -n \
    --arg location "$location1" \
    --arg sku "Standard" \
    $vwan_json)
az rest --method put --uri $vwan_uri --body $vwan_json_string
vwan_id=$(az network vwan show -n $vwan -g $rg --query id -o tsv)

# hub1
# https://docs.microsoft.com/en-us/rest/api/virtualwan/virtualhubs/createorupdate
# az network vhub create -n hub1 -g $rg --vwan $vwan -l $location1 --address-prefix $vwan_hub1_prefix --sku Standard
vhub1_json_string=$(jq -n \
    --arg location "$location1" \
    --arg vwan_id $vwan_id \
    --arg sku "Standard" \
    --arg hub_prefix $vwan_hub1_prefix \
    $vhub_json)
vhub1_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub1?api-version=$vwan_api_version"
az rest --method put --uri $vhub1_uri --body $vhub1_json_string    # PUT
az rest --method get --uri $vhub1_uri                              # GET

# hub2
# az network vhub create -n hub2 -g $rg --vwan $vwan -l $location2 --address-prefix $vwan_hub2_prefix --sku Standard
vhub2_json_string=$(jq -n \
    --arg location "$location2" \
    --arg vwan_id $vwan_id \
    --arg sku "Standard" \
    --arg hub_prefix $vwan_hub2_prefix \
    $vhub_json)
vhub2_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub2?api-version=$vwan_api_version"
az rest --method put --uri $vhub2_uri --body $vhub2_json_string                                   # PUT
az rest --method get --uri $vhub2_uri | jq                                                        # GET
az rest --method get --uri $vhubs_uri | jq '.value[] | .name,.properties.provisioningState'       # GET
# az rest --method delete --uri $vhub2_uri                                                        # DELETE

####################
# S2S VPN Branches #
####################

# Branch 1 CSR
az vm create -n branch1-nva -g $rg -l $location1 --image ${publisher}:${offer}:${sku}:${version} --size $nva_size \
    --admin-username "$username" --generate-ssh-keys --public-ip-address branch1-pip --public-ip-address-allocation static \
    --vnet-name branch1 --vnet-address-prefix $branch1_prefix --subnet nva --subnet-address-prefix $branch1_subnet --private-ip-address $branch1_bgp_ip --no-wait
branch1_ip=$(az network public-ip show -n branch1-pip -g $rg --query ipAddress -o tsv)
echo $branch1_ip

# vpn site branch1
# az network vpn-site create -n branch1 -g $rg -l $location1 --virtual-wan $vwan --asn $branch1_asn --bgp-peering-address $branch1_bgp_ip --ip-address $branch1_ip --address-prefixes ${branch1_ip}/32 --device-vendor cisco --device-model csr --link-speed 100
# https://docs.microsoft.com/en-us/rest/api/virtualwan/vpnsites/createorupdate
# Note that changing IsSecuritySite' flag is not supported, so configuring it as "active" is probably a good practice
vpnsite1_json_string=$(jq -n \
        --arg location "$location1" \
        --arg link_name "branch1" \
        --arg vwan_id $vwan_id \
        --arg remote_bgp_ip $branch1_bgp_ip \
        --arg remote_asn $branch1_asn \
        --arg remote_pip $branch1_ip \
        --arg site_prefix ${branch1_ip}/32 \
        --arg security 'true' \
        $vpnsite_json)
vpnsite1_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnSites/branch1?api-version=$vwan_api_version"
az rest --method put --uri $vpnsite1_uri --body $vpnsite1_json_string  # PUT
az rest --method get --uri $vpnsite1_uri                               # GET
# az rest --method delete --uri $vpnsite1_uri                          # DELETE

# vpn gateway hub1
# az network vpn-gateway create -n hubvpn1 -g $rg -l $location1 --vhub hub1 --asn $vwan_hub1_asn
# https://docs.microsoft.com/en-us/rest/api/virtualwan/vpngateways/createorupdate
vhub1_id=$(az network vhub show -n hub1 -g $rg --query id -o tsv)
vpnsite1_id=$(az network vpn-site show -n branch1 -g $rg --query id -o tsv)
# vpnlink_json='{name: link1, properties: {vpnSiteLink: }}'
# vpnconn_json='{name: "conn1", properties: {remoteVpnSite: {id: $vpnsite_id}, vpnLinkConnections: [' $vpnlink_json ']}}'
vpngw1_json_string=$(jq -n \
        --arg location "$location1" \
        --arg vhub_id $vhub1_id \
        --arg asn $vwan_hub1_asn \
        $vpngw_json)
vpngw1_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn1?api-version=$vwan_api_version"
az rest --method put --uri $vpngw1_uri --body $vpngw1_json_string   # PUT
az rest --method get --uri $vpngw1_uri                              # GET

# vpn connection hub1-branch1
# az network vpn-gateway connection create -n branch1 --gateway-name hubvpn1 -g $rg --remote-vpn-site branch1 --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10 --internet-security true
# https://docs.microsoft.com/en-us/rest/api/virtualwan/vpnconnections/createorupdate
site1_id=$(az network vpn-site show -n branch1 -g $rg --query id -o tsv)
site1_link_id=$(az rest --method get --uri $vpnsite1_uri | jq -r '.properties.vpnSiteLinks[0].id')
vpncx1_json_string=$(jq -n \
        --arg cx_name "branch1" \
        --arg site_id "$site1_id" \
        --arg site_link_id $site1_link_id \
        --arg psk $password \
        $vpncx_json)
vpncx1_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn1/vpnConnections/branch1?api-version=$vwan_api_version"
az rest --method put --uri $vpncx1_uri --body $vpncx1_json_string    # PUT
az rest --method get --uri $vpncx1_uri                               # GET

# Branch 2 CSR
az vm create -n branch2-nva -g $rg -l $location2 --image ${publisher}:${offer}:${sku}:${version} \
    --admin-username "$username" --generate-ssh-keys --public-ip-address branch2-pip \
    --public-ip-address-allocation static --vnet-name branch2 --vnet-address-prefix $branch2_prefix \
    --subnet nva --subnet-address-prefix $branch2_subnet --private-ip-address $branch2_bgp_ip --no-wait
branch2_ip=$(az network public-ip show -n branch2-pip -g $rg --query ipAddress -o tsv)
echo $branch2_ip

# VPN site branch2
vpnsite2_json_string=$(jq -n \
        --arg location "$location2" \
        --arg link_name "branch2" \
        --arg vwan_id $vwan_id \
        --arg remote_bgp_ip $branch2_bgp_ip \
        --arg remote_asn $branch2_asn \
        --arg remote_pip $branch2_ip \
        --arg site_prefix ${branch2_ip}/32 \
        --arg security 'false' \
        $vpnsite_json)
vpnsite2_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnSites/branch2?api-version=$vwan_api_version"
az rest --method put --uri $vpnsite2_uri --body $vpnsite2_json_string  # PUT
# az rest --method delete --uri $vpnsite2_uri                          # DELETE

# VPN GW hub2
vhub2_id=$(az network vhub show -n hub2 -g $rg --query id -o tsv)
vpngw2_json_string=$(jq -n \
        --arg location "$location2" \
        --arg vhub_id $vhub2_id \
        --arg asn $vwan_hub2_asn \
        $vpngw_json)
vpngw2_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn2?api-version=$vwan_api_version"
az rest --method put --uri $vpngw2_uri --body $vpngw2_json_string  # PUT
# az rest --method delete --uri $vpngw2_uri                        # DELETE

# Connection hub2-branch2
site2_id=$(az network vpn-site show -n branch2 -g $rg --query id -o tsv)
site2_link_id=$(az rest --method get --uri $vpnsite2_uri | jq -r '.properties.vpnSiteLinks[0].id')
vpncx2_json_string=$(jq -n \
        --arg cx_name "branch2" \
        --arg site_id "$site2_id" \
        --arg site_link_id $site2_link_id \
        --arg psk $password \
        $vpncx_json)
vpncx2_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn2/vpnConnections/branch2?api-version=$vwan_api_version"
az rest --method put --uri $vpncx2_uri --body $vpncx2_json_string
# az rest --method delete --uri $vpncx2_uri # DELETE

# Branch 3 CSR
az vm create -n branch3-nva -g $rg -l $location2 --image ${publisher}:${offer}:${sku}:${version} \
    --admin-username "$username" --generate-ssh-keys --public-ip-address branch3-pip \
    --public-ip-address-allocation static --vnet-name branch3 --vnet-address-prefix $branch3_prefix \
    --subnet nva --subnet-address-prefix $branch3_subnet --private-ip-address $branch3_bgp_ip --no-wait
branch3_ip=$(az network public-ip show -n branch3-pip -g $rg --query ipAddress -o tsv)
echo $branch3_ip

# VPN site branch3
vpnsite3_json_string=$(jq -n \
        --arg location "$location2" \
        --arg link_name "branch3" \
        --arg vwan_id $vwan_id \
        --arg remote_bgp_ip $branch3_bgp_ip \
        --arg remote_asn $branch3_asn \
        --arg remote_pip $branch3_ip \
        --arg site_prefix ${branch3_ip}/32 \
        --arg security 'false' \
        $vpnsite_json)
vpnsite3_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnSites/branch3?api-version=$vwan_api_version"
az rest --method put --uri $vpnsite3_uri --body $vpnsite3_json_string   # PUT
# az rest --method delete --uri $vpnsite3_uri                           # DELETE

# Connection hub2-branch3
site3_id=$(az network vpn-site show -n branch3 -g $rg --query id -o tsv)
site3_link_id=$(az rest --method get --uri $vpnsite3_uri | jq -r '.properties.vpnSiteLinks[0].id')
vpncx3_json_string=$(jq -n \
        --arg cx_name "branch3" \
        --arg site_id "$site3_id" \
        --arg site_link_id $site3_link_id \
        --arg psk $password \
        $vpncx_json)
vpncx3_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn2/vpnConnections/branch3?api-version=$vwan_api_version"
az rest --method put --uri $vpncx3_uri --body $vpncx3_json_string
# az rest --method delete --uri $vpncx3_uri                          # DELETE

# Add public key of CSRs to known_hosts
ssh-keyscan -H $branch1_ip >> ~/.ssh/known_hosts
ssh-keyscan -H $branch2_ip >> ~/.ssh/known_hosts
ssh-keyscan -H $branch3_ip >> ~/.ssh/known_hosts

#################
#     Vnets     #
#################

# Jump box in spoke1 (with PIP) - OPTIONAL
az vm create -n spoke1-jumphost -g $rg -l $location1 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
             --public-ip-address spoke1-pip --vnet-name spoke1-$location1 --vnet-address-prefix $spoke1_prefix \
             --subnet jumphost --subnet-address-prefix $spoke1_jump_subnet --private-ip-address $spoke1_jump_ip --no-wait

# Jump box in spoke2 (with PIP) - OPTIONAL
az vm create -n spoke2-jumphost -g $rg -l $location1 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
             --public-ip-address spoke2-pip --vnet-name spoke2-$location1 --vnet-address-prefix $spoke2_prefix \
             --subnet jumphost --subnet-address-prefix $spoke2_jump_subnet --private-ip-address $spoke2_jump_ip --no-wait

# Jump box in spoke3 (with PIP) - OPTIONAL
az vm create -n spoke3-jumphost -g $rg -l $location2 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
             --public-ip-address spoke3-pip --vnet-name spoke3-$location2 --vnet-address-prefix $spoke3_prefix \
             --subnet jumphost --subnet-address-prefix $spoke3_jump_subnet --private-ip-address $spoke3_jump_ip --no-wait

# Jump box in spoke4 (with PIP) - OPTIONAL
az vm create -n spoke4-jumphost -g $rg -l $location2 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
             --public-ip-address spoke4-pip --vnet-name spoke4-$location2 --vnet-address-prefix $spoke4_prefix \
             --subnet jumphost --subnet-address-prefix $spoke4_jump_subnet --private-ip-address $spoke4_jump_ip --no-wait

#  Add PIPs to known_hosts
spoke1_jump_pip=$(az network public-ip show -n spoke1-pip -g $rg --query ipAddress -o tsv)
ssh-keyscan -H $spoke1_jump_pip >> ~/.ssh/known_hosts
ssh $spoke1_jump_pip "ip a"
spoke2_jump_pip=$(az network public-ip show -n spoke2-pip -g $rg --query ipAddress -o tsv)
ssh-keyscan -H $spoke2_jump_pip >> ~/.ssh/known_hosts
ssh $spoke2_jump_pip "ip a"
spoke3_jump_pip=$(az network public-ip show -n spoke3-pip -g $rg --query ipAddress -o tsv)
ssh-keyscan -H $spoke3_jump_pip >> ~/.ssh/known_hosts
ssh $spoke3_jump_pip "ip a"
spoke4_jump_pip=$(az network public-ip show -n spoke4-pip -g $rg --query ipAddress -o tsv)
ssh-keyscan -H $spoke4_jump_pip >> ~/.ssh/known_hosts
ssh $spoke4_jump_pip "ip a"

# Test VM in spoke1 (no PIP)
az vm create -n spoke1-vm -g $rg -l $location1 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
    --public-ip-address "" --vnet-name spoke1-$location1 --vnet-address-prefix $spoke1_prefix \
    --subnet vm --subnet-address-prefix $spoke1_subnet --private-ip-address $spoke1_vm_ip --no-wait

# Test VM in spoke2 (no PIP)
az vm create -n spoke2-vm -g $rg -l $location1 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
    --public-ip-address "" --vnet-name spoke2-$location1 --vnet-address-prefix $spoke2_prefix \
    --subnet vm --subnet-address-prefix $spoke2_subnet --private-ip-address $spoke2_vm_ip --no-wait

# Test VM in spoke3 (no PIP)
az vm create -n spoke3-vm -g $rg -l $location2 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
    --public-ip-address "" --vnet-name spoke3-$location2 --vnet-address-prefix $spoke3_prefix \
    --subnet vm --subnet-address-prefix $spoke3_subnet --private-ip-address $spoke3_vm_ip --no-wait

# Test VM in spoke4 (no PIP)
az vm create -n spoke4-vm -g $rg -l $location2 --image ubuntuLTS --admin-username $username --generate-ssh-keys --size $vm_size \
    --public-ip-address "" --vnet-name spoke4-$location2 --vnet-address-prefix $spoke4_prefix \
    --subnet vm --subnet-address-prefix $spoke4_subnet --private-ip-address $spoke4_vm_ip --no-wait

# Add private IPs to known hosts
ssh-keyscan -H $spoke1_vm_ip >> ~/.ssh/known_hosts
ssh -J $spoke1_jump_pip $spoke1_vm_ip "ip a"
ssh-keyscan -H $spoke2_vm_ip >> ~/.ssh/known_hosts
ssh -J $spoke2_jump_pip $spoke2_vm_ip "ip a"
ssh-keyscan -H $spoke3_vm_ip >> ~/.ssh/known_hosts
ssh -J $spoke3_jump_pip $spoke3_vm_ip "ip a"
ssh-keyscan -H $spoke4_vm_ip >> ~/.ssh/known_hosts
ssh -J $spoke4_jump_pip $spoke4_vm_ip "ip a"

# Verify VMs, vnets and public IPs
az vm list -d -g $rg -o table
az network public-ip list -g $rg -o table
az network vnet list -g $rg -o table

# Connection spoke1-vhub1
# az network vhub connection create -n tospoke1 -g $rg --remote-vnet spoke1-$location1 --vhub-name hub1 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security false
# https://docs.microsoft.com/en-us/rest/api/virtualwan/hubvirtualnetworkconnections/createorupdate
vnet1_id=$(az network vnet show -n spoke1-$location1 -g $rg --query id -o tsv)
vnet1_cx_json_string=$(jq -n \
        --arg vnet_id "$vnet1_id" \
        $vnet_cx_json)
vnet1_cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/spoke1?api-version=$vwan_api_version"
az rest --method put --uri $vnet1_cx_uri --body $vnet1_cx_json_string  # PUT
az rest --method get --uri $vnet1_cx_uri                               # GET

# Connection spoke2-vhub1
# az network vhub connection create -n tospoke2 -g $rg --remote-vnet spoke3-$location2 --vhub-name hub2 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security false
vnet2_id=$(az network vnet show -n spoke2-$location1 -g $rg --query id -o tsv)
vnet2_cx_json_string=$(jq -n \
        --arg vnet_id "$vnet2_id" \
        $vnet_cx_json)
vnet2_cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub1/hubVirtualNetworkConnections/spoke2?api-version=$vwan_api_version"
az rest --method put --uri $vnet2_cx_uri --body $vnet2_cx_json_string  # PUT
az rest --method get --uri $vnet2_cx_uri                               # GET

# Connection spoke3-vhub2
vnet3_id=$(az network vnet show -n spoke3-$location2 -g $rg --query id -o tsv)
vnet3_cx_json_string=$(jq -n \
        --arg vnet_id "$vnet3_id" \
        $vnet_cx_json)
vnet3_cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub2/hubVirtualNetworkConnections/spoke3?api-version=$vwan_api_version"
az rest --method put --uri $vnet3_cx_uri --body $vnet3_cx_json_string  # PUT
az rest --method get --uri $vnet3_cx_uri                               # GET

# Connection spoke4-vhub2
vnet4_id=$(az network vnet show -n spoke4-$location2 -g $rg --query id -o tsv)
vnet4_cx_json_string=$(jq -n \
        --arg vnet_id "$vnet4_id" \
        $vnet_cx_json)
vnet4_cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub2/hubVirtualNetworkConnections/spoke4?api-version=$vwan_api_version"
az rest --method put --uri $vnet4_cx_uri --body $vnet4_cx_json_string  # PUT
az rest --method get --uri $vnet4_cx_uri                               # GET


# Route table for jump hosts to send ssh traffic to this computer (where you are running these az commands) over Internet
mypip=$(curl -s4 ifconfig.co)
az network route-table create -n jumphost-$location1 -g $rg -l $location1
az network route-table route create -n mypc -g $rg --route-table-name jumphost-$location1 --address-prefix "${mypip}/32" --next-hop-type Internet
az network vnet subnet update -n jumphost --vnet-name spoke1-$location1 -g $rg --route-table jumphost-$location1
az network route-table create -n jumphost-$location2 -g $rg -l $location2
az network route-table route create -n mypc -g $rg --route-table-name jumphost-$location2 --address-prefix "${mypip}/32" --next-hop-type Internet
az network vnet subnet update -n jumphost --vnet-name spoke3-$location2 -g $rg --route-table jumphost-$location2

##################
# Configure CSRs #
##################

# Download configuration
# Setting SAS
storage_account=vpnconfigs$RANDOM 
# storage_account=$(az storage account list -g $rg --query '[0].name' -o tsv)  # If storage account already created
container_name=configs
blob_name=vpnconfig.json
file_name="/tmp/${blob_name}"
az storage account create -n $storage_account -g $rg -l $location1 --sku Standard_LRS
az storage container create -n $container_name --account-name $storage_account
# Create SAS and download config file for 3 branches
end_time=`date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'`
sas=$(az storage container generate-sas -n $container_name --account-name $storage_account --permissions dlrw --expiry $end_time -o tsv)
account_url=$(az storage account show -n $storage_account -g $rg --query primaryEndpoints.blob -o tsv)
storage_url=${account_url}${container_name}"/"${blob_name}"?"${sas}
az network vpn-site download --vwan-name $vwan -g $rg --vpn-sites branch1 branch2 branch3 --output-blob-sas-url $storage_url
az storage blob download --account-name $storage_account -c $container_name -n $blob_name --sas-token $sas -f $file_name

# Extract info for branch1
site=branch1
branch1_psk=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].connectionConfiguration.PSK')
branch1_gw0_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance0')
branch1_gw1_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance1')
branch1_gw0_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance0')
branch1_gw1_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance1')
echo "Extracted info for $site: Gateway0 $branch1_gw0_pip, $branch1_gw0_bgp_ip. Gateway1 $branch1_gw1_pip, $branch1_gw0_bgp_ip. PSK $branch1_psk"

# Extract info for branch2
site=branch2
branch2_psk=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].connectionConfiguration.PSK')
branch2_gw0_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance0')
branch2_gw1_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance1')
branch2_gw0_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance0')
branch2_gw1_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance1')
echo "Extracted info for $site: Gateway0 $branch2_gw0_pip, $branch2_gw0_bgp_ip. Gateway1 $branch2_gw1_pip, $branch2_gw0_bgp_ip. PSK $branch2_psk"

# Extract info for branch3
site=branch3
branch3_psk=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].connectionConfiguration.PSK')
branch3_gw0_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance0')
branch3_gw1_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance1')
branch3_gw0_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance0')
branch3_gw1_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance1')
echo "Extracted info for $site: Gateway0 $branch3_gw0_pip, $branch3_gw0_bgp_ip. Gateway1 $branch3_gw1_pip, $branch3_gw0_bgp_ip. PSK $branch3_psk"

# Create CSR config for branch 1
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_2tunnels_tokenized.txt"
config_file_csr='branch1_csr.cfg'
config_file_local='/tmp/branch1_csr.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch1_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch1_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch1_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch1_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch1_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch1_asn}|g" $config_file_local
scp $config_file_local ${branch1_ip}:/${config_file_csr}
ssh $branch1_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch1_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch1_ip "wr mem"
ssh $branch1_ip "sh ip int b"
ssh $branch1_ip "sh ip bgp summary"

# Create CSR config for branch 2
# If you are going to cross-connect branch2 to both hubs, you want to skip this and go to the 4-tunnel config
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_2tunnels_tokenized.txt"
config_file_csr='branch2_csr.cfg'
config_file_local='/tmp/branch2_csr.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch2_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch2_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch2_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch2_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch2_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch2_asn}|g" $config_file_local
scp $config_file_local ${branch2_ip}:/${config_file_csr}
ssh $branch2_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch2_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch2_ip "wr mem"
ssh $branch2_ip "sh ip int b"
ssh $branch2_ip "sh ip bgp summary"

# Create CSR config for branch 3
# If you are going to cross-connect branch2 to both hubs, you want to skip this and go to the 4-tunnel config
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_2tunnels_tokenized.txt"
config_file_csr='branch3_csr.cfg'
config_file_local='/tmp/branch3_csr.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch2_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch3_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch3_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch3_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch3_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch3_asn}|g" $config_file_local
scp $config_file_local ${branch3_ip}:/${config_file_csr}
ssh $branch3_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch3_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch3_ip "wr mem"
ssh $branch3_ip "sh ip int b"
ssh $branch3_ip "sh ip bgp summary"

#################
#       RT      #
#################

# RTv2 (old, aka routeTable)
# routev2_json='{destinationType: "CIDR", destinations: ["0.0.0.0/0"], nextHopType: "IPAddress", nextHops: [$azfw_ip]}'
# rtv2_json='{properties: {routes: ['$route_json'], attachedConnections: [$connections]}}'
# rtv21_json_string=$(jq -n \
#         --arg azfw_ip "$azfw1_ip" \
#         --arg connections "AllVnets" \
#         $rtv2_json)

# Create Route Table (aka hubRouteTable)
# https://docs.microsoft.com/en-us/rest/api/virtualwan/hubroutetables/createorupdate
rt_name=rt1
rt_json_string=$(jq -n \
        $rt_json)
rt_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub1/hubRouteTables/${rt_name}?api-version=$vwan_api_version"
az rest --method put --uri $rt_uri --body $rt_json_string   # PUT
az rest --method get --uri $rt_uri                          # GET
# az rest --method delete --uri $rt_uri                     # DELETE

# Update vnet connection associated RT
hub_name=hub1
cx_name=spoke1
cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubVirtualNetworkConnections/${cx_name}?api-version=$vwan_api_version"
cx_json=$(az rest --method get --uri $cx_uri)
new_rt_name=rt1
new_rt_id="/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubRouteTables/${new_rt_name}"
cx_json_updated=$(echo $cx_json | jq '.properties.routingConfiguration.associatedRouteTable.id = "'$new_rt_id'" | {name, properties}')
az rest --method put --uri $cx_uri --body $cx_json_updated
az rest --method get --uri $cx_uri | jq '.properties.routingConfiguration.associatedRouteTable.id'

# Update vnet connection propagated RT
hub_name=hub1
cx_name=spoke1
cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubVirtualNetworkConnections/${cx_name}?api-version=$vwan_api_version"
cx_json=$(az rest --method get --uri $cx_uri)
new_rt_names=(defaultRouteTable rt1)
new_rt_ids=""
for new_rt_name in ${new_rt_names[@]}; do
    new_rt_ids="${new_rt_ids}{\"id\": \"/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubRouteTables/${new_rt_name}\"},"
done
new_rt_ids="${new_rt_ids: : -1}"   # Remove trailing comma
cx_json_updated=$(echo $cx_json | jq '.properties.routingConfiguration.propagatedRouteTables.ids = ['$new_rt_ids'] | {name, properties}')
az rest --method put --uri $cx_uri --body $cx_json_updated
az rest --method get --uri $cx_uri | jq '.properties.routingConfiguration.propagatedRouteTables.ids'

# Add routes to RT
# https://docs.microsoft.com/en-us/rest/api/virtualwan/hubroutetables/createorupdate#hubroute
hub_name=hub1
rt_name=defaultRouteTable
rt_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubRouteTables/${rt_name}?api-version=$vwan_api_version"
rt_json_current=$(az rest --method get --uri $rt_uri)
azfw1_id=$(az network firewall show -n azfw1 -g $rg -o tsv --query id)
# type (next hop): CIDR, resourceId, Service
# prefixes: comma-separated prefix list
new_route_json_string=$(jq -n \
        --arg name "onprem" \
        --arg type "ResourceId" \
        --arg prefixes "172.16.0.0/12" \
        --arg nexthop "$azfw1_id" \
        $route_json)
existing_routes=$(echo $rt_json_current | jq '.properties.routes[]')
if [ -z "${existing_routes}" ]
then
    new_routes=${new_route_json_string}
else
    new_routes=${existing_routes},${new_route_json_string}
fi
rt_json_updated=$(echo $rt_json_current | jq '.properties.routes = ['$new_routes'] | {name, properties}')
az rest --method put --uri $rt_uri --body $rt_json_updated    # PUT
az rest --method get --uri $rt_uri | jq '.properties.routes'  # GET

# Delete all routes from RT
hub_name=hub1
rt_name=defaultRouteTable
rt_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubRouteTables/${rt_name}?api-version=$vwan_api_version"
rt_json_current=$(az rest --method get --uri $rt_uri)
rt_json_updated=$(echo $rt_json_current | jq '.properties.routes = [] | {name, properties}')
az rest --method put --uri $rt_uri --body $rt_json_updated    # PUT
az rest --method get --uri $rt_uri | jq '.properties.routes'  # GET

# Add routes to vnet conection
# https://docs.microsoft.com/en-us/rest/api/virtualwan/hubvirtualnetworkconnections/createorupdate#staticroute
hub_name=hub1
cx_name=spoke1
cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubVirtualNetworkConnections/${cx_name}?api-version=$vwan_api_version"
cx_json=$(az rest --method get --uri $cx_uri)
# prefixes: comma-separated prefix list
new_route_json_string=$(jq -n \
        --arg name "test" \
        --arg prefixes "192.168.0.0/16" \
        --arg nexthop "172.21.10.68" \
        $cxroute_json)
existing_routes=$(echo $cx_json | jq '.properties.routingConfiguration.vnetRoutes.staticRoutes[]')
if [ -z "${existing_routes}" ]
then
    new_routes=${new_route_json_string}
else
    new_routes=${existing_routes},${new_route_json_string}
fi
cx_json_updated=$(echo $cx_json | jq '.properties.routingConfiguration.vnetRoutes.staticRoutes = ['$new_routes'] | {name, properties}')
az rest --method put --uri $cx_uri --body $cx_json_updated  # PUT
az rest --method get --uri $cx_uri | jq '.properties.routingConfiguration.vnetRoutes.staticRoutes'  # GET

# Delete all routes from vnet cx
hub_name=hub1
cx_name=spoke1
cx_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/${hub_name}/hubVirtualNetworkConnections/${cx_name}?api-version=$vwan_api_version"
cx_json=$(az rest --method get --uri $cx_uri)
cx_json_updated=$(echo $cx_json | jq '.properties.routingConfiguration.vnetRoutes.staticRoutes = [] | {name, properties}')
az rest --method put --uri $cx_uri --body $cx_json_updated    # PUT
az rest --method get --uri $cx_uri | jq '.properties.routingConfiguration.vnetRoutes.staticRoutes'  # GET

#################
# Log Analytics #
#################

# See https://docs.microsoft.com/azure/virtual-wan/logs-metrics

az monitor log-analytics workspace create -n $logws_name -g $rg
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
hub1_vpngw_id=$(az network vpn-gateway show -n hubvpn1 -g $rg --query id -o tsv)
hub2_vpngw_id=$(az network vpn-gateway show -n hubvpn2 -g $rg --query id -o tsv)
az monitor diagnostic-settings create -n mydiag --resource $hub1_vpngw_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "GatewayDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "TunnelDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "RouteDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "IKEDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]' >/dev/null
az monitor diagnostic-settings create -n mydiag --resource $hub2_vpngw_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "GatewayDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "TunnelDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "RouteDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "IKEDiagnosticLog", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]' >/dev/null

######################
# Connectivity tests #
######################

# Test connectivity to jump host
ssh $spoke1_jump_pip "ip a"
# Connectivity to Internet (local vhub)
ssh $spoke1_jump_pip "curl -s4 http://ifconfig.co"
ssh $spoke1_jump_pip "curl -s4 http://api.ipify.org"
# Connectivity to spoke1 (local vhub)
ssh $spoke1_jump_pip "ping $spoke1_vm_ip -c 3"
ssh -J $spoke1_jump_pip $spoke1_vm_ip "ip a"
ssh $spoke1_jump_pip "nc -vz $spoke1_vm_ip 22"
# Connectivity to spoke2 (remote vhub)
ssh $spoke1_jump_pip "ping $spoke2_vm_ip -c 3"
ssh -J $spoke1_jump_pip $spoke2_vm_ip "ip a"
ssh $spoke1_jump_pip "nc -vz $spoke2_vm_ip 22"
# Connectivity to branch1 (local vhub)
ssh $spoke1_jump_pip "ping $branch1_bgp_ip -c 3"
ssh $spoke1_jump_pip "nc -vz $branch1_bgp_ip 22"
# Connectivity to branch2 (remote vhub)
ssh $spoke1_jump_pip "ping $branch2_bgp_ip -c 3"
ssh $spoke1_jump_pip "nc -vz $branch2_bgp_ip 22"
# BGP info in branch1
ssh $branch1_ip "show ip bgp summary"
ssh $branch1_ip "show ip route"
ssh $branch1_ip "show ip route bgp"
# BGP routes in branch2
ssh $branch2_ip "show ip bgp summary"
ssh $branch2_ip "show ip route"
ssh $branch2_ip "show ip route bgp"
# Branch to branch
ssh $branch1_ip "ping $branch2_bgp_ip"

###############
# Secured hub #
###############

# Enable/disable secured vnet connections (enables 0/0 propagation, but doesnt actually inject it)
az network vhub connection create -n tospoke1 -g $rg --remote-vnet spoke1-$location1 --vhub-name hub1 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true
az network vhub connection create -n tospoke2 -g $rg --remote-vnet spoke3-$location2 --vhub-name hub2 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true
# az network vpn-gateway connection create -n branch1 --gateway-name hubvpn1 -g $rg --remote-vpn-site branch1 --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10 --internet-security true
# az network vpn-gateway connection create -n branch2 --gateway-name hubvpn2 -g $rg --remote-vpn-site branch2 --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10 --internet-security true

# Firewall policy
az network firewall policy create -n myfwpolicy -g $rg
az network firewall policy rule-collection-group create -n ruleset01 --policy-name myfwpolicy -g $rg --priority 100
# Example network collections
az network firewall policy rule-collection-group collection add-filter-collection --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg \
    --name filter01 --collection-priority 101 --action Allow --rule-name allowSSH --rule-type NetworkRule --description "TCP 22" \
    --destination-addresses "172.16.0.0/12" --source-addresses "172.16.0.0/12" --ip-protocols TCP --destination-ports 22
az network firewall policy rule-collection-group collection add-filter-collection --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg \
    --name filter02 --collection-priority 102 --action Allow --rule-name allowICMP --rule-type NetworkRule --description "ICMP traffic" \
    --destination-addresses "172.16.0.0/12" --source-addresses "172.16.0.0/12" --ip-protocols ICMP --destination-ports "1-65535"
az network firewall policy rule-collection-group collection add-filter-collection --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg \
    --name ntp --collection-priority 103 --action Allow --rule-name allowNTP --rule-type NetworkRule --description "ICMP traffic" \
    --destination-addresses "172.16.0.0/12" --source-addresses "0.0.0.0/0" --ip-protocols UDP --destination-ports "123"
# Example application collection with 2 rules
az network firewall policy rule-collection-group collection add-filter-collection --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg \
    --name ifconfig --collection-priority 201 --action Allow --rule-name allowIfconfig --rule-type ApplicationRule --description "ifconfig" \
    --target-fqdns "ifconfig.co" --source-addresses "172.16.0.0/12" --protocols Http=80 Https=443
az network firewall policy rule-collection-group collection rule add -g $rg --policy-name myfwpolicy --rule-collection-group-name ruleset01 --collection-name ifconfig \
    --name ipify --target-fqdns "api.ipify.org" --source-addresses "172.16.0.0/12" --protocols Http=80 Https=443 --rule-type ApplicationRule
# Example application collection with wildcards
az network firewall policy rule-collection-group collection add-filter-collection --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg \
    --name ubuntu --collection-priority 202 --action Allow --rule-name repos --rule-type ApplicationRule --description "ubuntucom" \
    --target-fqdns "*.ubuntu.com" --source-addresses "172.16.0.0/12" --protocols Http=80 Https=443
# Example deleting rules
# az network firewall policy rule-collection-group collection remove --policy-name myfwpolicy --rule-collection-group-name ruleset01 -g $rg

# Azure Firewalls
az network firewall create -n azfw1 -g $rg --vhub hub1 --policy myfwpolicy -l $location1 --sku AZFW_Hub
az network firewall create -n azfw2 -g $rg --vhub hub2 --policy myfwpolicy -l $location2 --sku AZFW_Hub

# Diagnostics
azfw1_id=$(az network firewall show -n azfw1 -g $rg -o tsv --query id)
azfw2_id=$(az network firewall show -n azfw2 -g $rg -o tsv --query id)
az monitor diagnostic-settings create -n mydiag --resource $azfw1_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'
az monitor diagnostic-settings create -n mydiag --resource $azfw2_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'

#######################
# FW Mgr - RTv2 (old) #
#######################

# Routes in vhub (using the same route table names that the portal generates)
# This is the route for "Traffic for Virtual Networks" and will inject the default in the vnet
# The route injected by the protal has as next hop .132 instead of .68????
az network vhub route-table create -n VirtualNetworkRouteTable -g $rg --vhub-name hub1 --connections All_Vnets \
    --destination-type CIDR --destinations "0.0.0.0/0" --next-hop-type IPAddress --next-hops $rs1_ip
az network vhub route-table create -n VirtualNetworkRouteTable -g $rg --vhub-name hub2 --connections All_Vnets \
    --destination-type CIDR --destinations "0.0.0.0/0" --next-hop-type IPAddress --next-hops $rs2_ip
# This is the route for "Traffic for Branches" and will inject the default in the vnet
# However, the route doesnt appear to be advertised over BGP
az network vhub route-table create -n BranchRouteTable -g $rg --vhub-name hub1 --connections All_Vnets \
    --destination-type CIDR --destinations "0.0.0.0/0" --next-hop-type IPAddress --next-hops $rs1_ip
az network vhub route-table create -n BranchRouteTable -g $rg --vhub-name hub2 --connections All_Vnets \
    --destination-type CIDR --destinations "0.0.0.0/0" --next-hop-type IPAddress --next-hops $rs2_ip
# This is the route updates introduced by "Traffic between vnets via Azure Firewall"
# ...excluding the 0/0 for branches
az network vhub route-table create -n VirtualNetworkRouteTable -g $rg --vhub-name hub1 --connections All_Vnets \
    --destination-type CIDR --next-hop-type IPAddress --next-hops $azfw1_ip \
    --destinations "0.0.0.0/0" $spoke1_prefix $spoke2_prefix $branch1_prefix $branch2_prefix 
az network vhub route-table create -n BranchRouteTable -g $rg --vhub-name hub1 --connections All_Vnets \
    --destination-type CIDR --next-hop-type IPAddress --next-hops $azfw1_ip \
    --destinations $spoke1_prefix $spoke2_prefix $branch1_prefix $branch2_prefix 
az network vhub route-table delete -n VirtualNetworkRouteTable -g $rg --vhub-name hub2
az network vhub route-table create -n VirtualNetworkRouteTable -g $rg --vhub-name hub2 --connections All_Vnets \
    --destination-type CIDR --next-hop-type IPAddress --next-hops $azfw2_ip \
    --destinations "0.0.0.0/0" $spoke1_prefix $spoke2_prefix $branch1_prefix $branch2_prefix 
az network vhub route-table delete -n BranchRouteTable -g $rg --vhub-name hub2
az network vhub route-table create -n BranchRouteTable -g $rg --vhub-name hub2 --connections All_Vnets \
    --destination-type CIDR --next-hop-type IPAddress --next-hops $azfw2_ip \
    --destinations $spoke1_prefix $spoke2_prefix $branch1_prefix $branch2_prefix 

# If route-tables need to be deleted:
# az network vhub route-table delete -n VnetRouteTable -g $rg --vhub-name hub1
# az network vhub route-table delete -n VnetRouteTable -g $rg --vhub-name hub2

###########
# zScaler #
###########

# Remove role assignment for zscaler SP
keyvault=erjositoKeyvault
appid=$(az keyvault secret show --vault-name $keyvault -n zscaler-app-id --query value -o tsv)
oid=$(az ad sp show --id $appid --query objectId -o tsv)
subid=$(az account show --query id -o tsv)
assignmentid=$(az role assignment list --scope "/subscriptions/${subid}" --assignee $oid --query '[0].id' -o tsv)
if [[ -z $assignmentid ]]
then
    echo "No assignment found for app ID $appid"
else
    az role assignment delete --ids $assignmentid -y
fi
# Add role assignment
appid=$(az keyvault secret show --vault-name erjositoKeyvault -n zscaler-app-id --query value -o tsv)
oid=$(az ad sp show --id $appid --query objectId -o tsv)
subid=$(az account show --query id -o tsv)
az role assignment create --scope "/subscriptions/${subid}" --assignee $oid --role Contributor

#################################
# Troubleshooting / Diagnostics #
#################################

az network public-ip list -g $rg -o table
az network nic list -g $rg -o table
az network nic show-effective-route-table -n spoke1-jumphostVMNic -g $rg -o table
az network nic show-effective-route-table -n spoke2-jumphostVMNic -g $rg -o table
az network nic show-effective-route-table -n spoke1-vmVMNic -g $rg -o table
az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o table
az network vhub connection list --vhub-name hub1 -g $rg -o table
az network vhub route-table list --vhub-name hub1 -g $rg -o table
az network vhub route list --vhub-name hub1 -g $rg -o table
az network vhub connection list --vhub-name hub2 -g $rg -o table
az network vhub route-table list --vhub-name hub2 -g $rg -o table
az network vhub route list --vhub-name hub2 -g $rg -o table
az network vpn-site list -g $rg -o table
az network vpn-gateway list -g $rg -o table
az network vpn-gateway connection list --gateway-name hubvpn1 -g $rg -o table
az network vpn-gateway connection list --gateway-name hubvpn2 -g $rg -o table
az network firewall policy list -g $rg -o table
az network firewall policy rule-collection-group list --policy myfwpolicy -g $rg -o table
az network firewall policy rule-collection-group collection list --policy myfwpolicy -g $rg --rule-collection-group-name ruleset01 -o table 
az network firewall policy rule-collection-group collection list --policy myfwpolicy -g $rg --rule-collection-group-name ruleset01   # There are no 'collection show' or 'collection rule list' commands
ssh $username@$branch1_ip "sh ip bgp"
ssh $username@$branch1_ip "sh ip interface brief"
ssh $username@$branch1_ip "sh ip route"

# REST URIs
vhubs_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs?api-version=$vwan_api_version"
vhub1_base_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub1"
vhub2_base_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/virtualHubs/hub2"
vhub1_uri="${vhub1_base_uri}?api-version=$vwan_api_version"
vhub1_ipconfigs_uri="${vhub1_base_uri}/ipConfigurations?api-version=$vwan_api_version"
vhub1_bgp_uri="${vhub1_base_uri}/bgpConnections?api-version=$vwan_api_version"
vhub1_vnetcx_uri="${vhub1_base_uri}/hubVirtualNetworkConnections?api-version=$vwan_api_version"
vhub1_rt_uri="${vhub1_base_uri}/routeTables?api-version=$vwan_api_version"
vhub1_hubrt_uri="${vhub1_base_uri}/hubRouteTables?api-version=$vwan_api_version"
vhub1_effrt_uri="${vhub1_base_uri}/effectiveRoutes?api-version=$vwan_api_version"
vhub1_default_hubrt_uri="${vhub1_base_uri}/hubRouteTables/defaultRouteTable?api-version=$vwan_api_version"
vhub2_rt_uri="${vhub2_base_uri}/routeTables?api-version=$vwan_api_version"
vhub2_hubrt_uri="${vhub2_base_uri}/hubRouteTables?api-version=$vwan_api_version"
vhub2_default_hubrt_uri="${vhub2_base_uri}/hubRouteTables/defaultRouteTable?api-version=$vwan_api_version"
vhub2_vnetcx_uri="${vhub2_base_uri}/hubVirtualNetworkConnections?api-version=$vwan_api_version"
vpnsites_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnSites?api-version=$vwan_api_version"
vpngws_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways?api-version=$vwan_api_version"
vpngw1_base_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn1"
vpngw1_uri="${vpngw1_base_uri}?api-version=$vwan_api_version"
vpngw1_cx_uri="${vpngw1_base_uri}/vpnConnections?api-version=$vwan_api_version"
vpngw2_base_uri="https://management.azure.com/subscriptions/$subscription_id/resourceGroups/$rg/providers/Microsoft.Network/vpnGateways/hubvpn2"
vpngw2_uri="${vpngw2_base_uri}?api-version=$vwan_api_version"
vpngw2_cx_uri="${vpngw2_base_uri}/vpnConnections?api-version=$vwan_api_version"

# Get hubs
az rest --method get --uri $vhubs_uri | jq '.value'
az rest --method get --uri $vhubs_uri | jq -r '.value | map({name, provisioningState: .properties.provisioningState})'
# Get hub details
az rest --method get --uri $vhub1_uri
# Get hub ipconfig (not working)
az rest --method get --uri $vhub1_ipconfigs_uri
# Get hub vnet connections
az rest --method get --uri $vhub1_vnetcx_uri
az rest --method get --uri $vhub2_vnetcx_uri
# Get RTv2 (aka routeTable)
az rest --method get --uri $vhub1_rt_uri
# Get hub RTs (aka hubRouteTable)
az rest --method get --uri $vhub1_hubrt_uri
# Get hub default hubRT
az rest --method get --uri $vhub1_default_hubrt_uri
az rest --method get --uri $vhub2_default_hubrt_uri
# Get hub BGP connections (NOT WORKING!!!)
az rest --method get --uri $vhub1_bgp_uri
# Get hub effective routes (NOT WORKING!!!)
az rest --method get --uri $vhub1_effrt_uri
# Get VPN GWs
az rest --method get --uri $vpngws_uri
az rest --method get --uri $vpngws_uri | jq -r '.value | map({name, provisioningState: .properties.provisioningState})'
 # Get VPN GW details
az rest --method get --uri $vpngw1_uri
az rest --method get --uri $vpngw2_uri
# Get VPN GW connections
az rest --method get --uri $vpngw1_cx_uri
az rest --method get --uri $vpngw1_cx_uri | jq -r '.value | map({name, provisioningState: .properties.provisioningState})'
az rest --method get --uri $vpngw2_cx_uri
az rest --method get --uri $vpngw2_cx_uri | jq -r '.value | map({name, provisioningState: .properties.provisioningState})'
# Get VPN Sites
az rest --method get --uri $vpnsites_uri
az rest --method get --uri $vpnsites_uri | jq -r '.value | map({name, provisioningState: .properties.provisioningState})'

#########################
# Log Analytics queries #
#########################

logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
# AZFW log summary
query='AzureDiagnostics 
| where ResourceType == "AZUREFIREWALLS" 
//| summarize count() by Category
| summarize count() by bin(TimeGenerated, 1h), Category
| where TimeGenerated >= ago(6h)'
# AzFW app rule deny logs
query='AzureDiagnostics 
| where ResourceType == "AZUREFIREWALLS" 
| where Category == "AzureFirewallApplicationRule" 
| where TimeGenerated >= ago(5m) 
| project Protocol=split(msg_s, " ")[0], From=split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",3,4)], To=split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",5,6)], Action=trim_end(".", tostring(split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",7,8)])), Rule_Collection=iif(split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",10,11)]=="traffic.", "AzureInternalTraffic", iif(split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",10,11)]=="matched.","NoRuleMatched",trim_end(".",tostring(split(msg_s, " ")[iif(split(msg_s, " ")[0]=="HTTPS",10,11)])))), Rule=iif(split(msg_s, " ")[11]=="Proceeding" or split(msg_s, " ")[12]=="Proceeding","DefaultAction",split(msg_s, " ")[12]), msg_s 
| where Rule_Collection != "AzureInternalTraffic" 
| where Action == "Deny" 
| take 5'
# AzFW net rule logs
query='AzureDiagnostics
| where Category == "AzureFirewallNetworkRule"
| where TimeGenerated >= ago(5m) 
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " to " TargetIP ":" TargetPortInt:int *
| parse msg_s with * ". Action: " Action1a
| parse msg_s with * " was " Action1b " to " NatDestination
| parse msg_s with Protocol2 " request from " SourceIP2 " to " TargetIP2 ". Action: " Action2
| extend SourcePort = tostring(SourcePortInt),TargetPort = tostring(TargetPortInt)
| extend Action = case(Action1a == "", case(Action1b == "",Action2,Action1b), Action1a),Protocol = case(Protocol == "", Protocol2, Protocol),SourceIP = case(SourceIP == "", SourceIP2, SourceIP),TargetIP = case(TargetIP == "", TargetIP2, TargetIP),SourcePort = case(SourcePort == "", "N/A", SourcePort),TargetPort = case(TargetPort == "", "N/A", TargetPort),NatDestination = case(NatDestination == "", "N/A", NatDestination)
//| where Action == "Deny" 
//| project TimeGenerated, msg_s, Protocol, SourceIP,SourcePort,TargetIP,TargetPort,Action, NatDestination  // with msg_s
| project TimeGenerated, Protocol, SourceIP,SourcePort,TargetIP,TargetPort,Action, NatDestination  // without msg_s
| take 20 '
# VPNGW IKE diagnostics
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where Category == "IKEDiagnosticLog" 
| where TimeGenerated >= ago(5m) 
| project Message
| take 10'
# VPNGW Route diagnostics (BGP connected/disconnected events)
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where Category == "RouteDiagnosticLog" 
| where TimeGenerated >= ago(2h) 
| project TimeGenerated, Resource, peerAddress_s, OperationName, Message
| take 20'
# VPNGW Route diagnostics summary (the presence of logs indicate BGP adjacency instability)
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where Category == "RouteDiagnosticLog" 
| where TimeGenerated >= ago(6h) 
| summarize count() by OperationName'
# VPNGW Tunnel diagnostics summary (the presence of logs indicate tunnel instability)
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where Category == "TunnelDiagnosticLog" 
| where TimeGenerated >= ago(2h) 
| summarize count() by OperationName'
# VPNGW Tunnel diagnostics (the presence of logs indicate tunnel instability)
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where Category == "TunnelDiagnosticLog" 
| where TimeGenerated >= ago(15m) 
| project TimeGenerated, Resource, remoteIP_s, stateChangeReason_s, status_s
| take 20'
# VPNGW Gateway log summary
query='AzureDiagnostics 
| where ResourceType == "VPNGATEWAYS" 
| where TimeGenerated >= ago(10m) 
| summarize count() by Category'
# Search somehting
query='search "azfw"'
# Send query
az monitor log-analytics query -w $logws_customerid --analytics-query $query -o tsv
